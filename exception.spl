[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = -1;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11]*512 - 1;
backup;
multipush(EIP);

alias currentPID R15;
currentPID = [SYSTEM_STATUS_TABLE + 1];

if (EC != 0 || [PROCESS_TABLE + currentPID*16 + 13] == (PTLR*512 - 1)) then
  breakpoint;
  print "Error exiting:";
 // if (EC == 0) then
 //   print "Stack overflow";
  //endif;
  //if (EC == 1) then
    //print "Illegal INSTR";
  //endif;
  //if (EC == 2) then
    //print "Illegal MA";
  //endif;
  //if (EC == 3) then
    //print "Arithmetic EX";
  //endif;

  R1 = EXIT_PROCESS;
  R2 = currentPID;
  call PROCESS_MANAGER;

  call SCHEDULER;
endif;

alias pageNum R5;
pageNum = EPN;

if (pageNum >= 4 && pageNum < 8) then
  multipush(R5, R15);
  R1 = GET_CODE_PAGE;
  R2 = [DISK_MAP_TABLE + currentPID*10 + pageNum];
  call MEMORY_MANAGER;
  multipop(R5, R15);

  [PTBR + 2*pageNum] = R0;
  [PTBR + 2*pageNum + 1] = "1100";
else
  multipush(R5, R15);
  R1 = GET_FREE_PAGE;
  call MEMORY_MANAGER;
  multipop(R5, R15);
  [PTBR + 4] = R0;
  [PTBR + 5] = "1110";

  multipush(R5, R15);
  R1 = GET_FREE_PAGE;
  call MEMORY_MANAGER;
  multipop(R5, R15);
  [PTBR + 6] = R0;
  [PTBR + 7] = "1110";
endif;

breakpoint;
multipop(EIP);
restore;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];
SP = SP + 1;
[[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + 2*(SP/512)]*512 + SP%512] = EIP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
ireturn;