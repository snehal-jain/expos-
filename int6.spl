//read

alias currentPID R15;
currentPID = [SYSTEM_STATUS_TABLE + 1];
[PROCESS_TABLE + currentPID*16 + 9] = INT_READ;

alias userSP R5;
userSP = SP;

[PROCESS_TABLE + currentPID*16 + 13] = SP;

//set the  sp value to the beggining of user area page
SP = [PROCESS_TABLE + currentPID*16 + 11]*512 - 1;

alias fileDescriptor R6;
fileDescriptor = [[PTBR + 2*(userSP - 4)/512]*512 + (userSP - 4)%512];

alias physicalAddrRetVal R14;
physicalAddrRetVal = [PTBR + 2*(userSP - 1)/512]*512 + (userSP - 1)%512;

alias wordAddr R7;
    wordAddr = [[PTBR + 2*(userSP - 3)/512]*512 + (userSP - 3)%512];

if(fileDescriptor==-1)then
    breakpoint;
    backup;
    R1 = TERMINAL_READ;
    R2 = currentPID;
    R3 = wordAddr;
    call DEVICE_MANAGER;
    restore;

else
    if(fileDescriptor>7||fileDescriptor<0)then
        [physicalAddrRetVal] = -1;
    

    else
        alias perProcessTable R7;
        perProcessTable = ([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11]) * 512 + (512 - 16);
        if([perProcessTable+fileDescriptor*2]!=FILE)then
            [physicalAddrRetVal]=-1;
        else
            breakpoint;
            alias inodeTablei R8;
            alias fileTablei R9;
            fileTablei=[perProcessTable+2*fileDescriptor];
            inodeTablei=[OPEN_FILE_TABLE+4*fileTablei];
            backup;
            R1=ACQUIRE_INODE;
            R2=inodeTablei;
            R3=currentPID;
            call RESOURCE_MANAGER;
            R10=R0;
            restore;
            
            if(R10!=0||R10!=-1)then
                R0=-1;
                return;
            endif;
                alias lseek R11;
                lseek=[OPEN_FILE_TABLE+4*fileTablei+2];
                if([OPEN_FILE_TABLE+4*fileTablei]==INODE_ROOT)then
                    if(lseek==480)then
                        [physicalAddrRetVal]=-2;
                    else
                        [wordAddr] = [ROOT_FILE + lseek];
					[OPEN_FILE_TABLE + 4 * fileTablei + 2] = [OPEN_FILE_TABLE + 4 * fileTablei + 2] + 1;
					[physicalAddrRetVal] = 0;
				endif;
			else
				if (lseek == [INODE_TABLE + 16 * inodeTablei + 2]) then
					[physicalAddrRetVal] = -2;
				else
					//lseek to address
					R11 = lseek / 512;
					backup;
					R1 = 2;
					R2 = [INODE_TABLE + 16 * inodeTablei + 8 + R11];
					R3 = lseek % 512; 
					R4 = wordAddr;
					call MOD_3;
					multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
					[OPEN_FILE_TABLE + fileTablei*4+ 2] = [OPEN_FILE_TABLE + fileTablei*4 + 2] + 1;
					[physicalAddrRetVal] = 0;
				endif;
			endif;
			multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
			R1 = RELEASE_INODE;
			R2 = inodeTablei;
			R3 = [SYSTEM_STATUS_TABLE + 1];
			call SCHEDULER;							//release inode
			multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
		endif;
	endif;
endif;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
SP = userSP;
ireturn; 
                         





            

